#!/usr/bin/python
import sys
import traceback
from prettytable import PrettyTable
from cssefclient.cssefclient import *

import pprint

class ArgumentParser(object):
	def __init__(self, inputList):
		self.inputList = inputList
		self.rawArguments = []
		self.command = None
		self.arguments = self.parseArguments()

	def parseCommand(self, instanceDict):
		i = 0
		argString = ""
		while i < len(self.inputList) and self.inputList[i][0] != '-':
			argString += self.inputList[i] + " "
			i+=1
		self.command = instanceDict[argString[:-1]]

	def parseArguments(self):
		i = 0
		argumentsDict = {}
		while i < len(self.inputList) and self.inputList[i][0] != '-':
			i += 1
		while i < len(self.inputList) and self.inputList[i][0] == '-':
			# Strip the dashes off the front of the keyword
			if self.inputList[i][:2] == '--':
				key = self.inputList[i][2:]
			else:
				key = self.inputList[i][1:]
			# Determine of the value is in the same element
			if '=' in key:
				value = key.split('=')[1]
				key = key.split('=')[0]
				i += 1
			else:
				value = self.inputList[i + 1]
				i += 2
			argumentsDict[key] = value
		if argumentsDict == {}:
			return None
		else:
			return argumentsDict

def displayOutput(outputDict):
	if outputDict['value'] != 0:
		sys.stderr.write("The server encountered an error:\n")
		sys.stderr.write("\n".join(outputDict['message'])+"\n")
		sys.exit(outputDict['value'])
	if len(outputDict['content']) > 0:
		outputTable = PrettyTable(output['content'][0].keys())
		outputTable.padding_width = 1
		for i in outputDict['content']:
			outputTable.add_row(i.values())
		print outputTable

if __name__ == "__main__":
	# cli format:
	# ./cssef-cli [COMMAND] [ARGUMENTS]
	config = Configuration('/etc/cssef/cssef.conf')
	apiConn = getConn(config)

	# Dict to map the endpoint instances
	instanceDict = {}
	availableEndpoints = AvailableEndpoints(apiConn).execute()
	for moduleDict in availableEndpoints['content']:
		for endpointDict in moduleDict['endpoints']:
			instance = CeleryEndpoint.fromDict(endpointDict, apiConn)
			moduleString = " ".join(moduleDict['menuName'] + endpointDict['menu'])
			instanceDict[moduleString] = instance

	pprint.pprint(instanceDict)

	argparse = ArgumentParser(sys.argv[1:])
	argparse.parseCommand(instanceDict)
	try:
		if argparse.arguments:
			output = argparse.command.execute(**argparse.arguments)
		else:
			output = argparse.command.execute()
	except Exception as e:
		output = {"value": 9000, "message": ["The server encountered an error:", str(e)]}
	displayOutput(output)